/*
 * Bookstore API
 * API for managing the bookstore's inventory, available authors, and customer orders
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Book;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for booksGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Books Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No books found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = booksGetCall(_callback);
        return localVarCall;

    }

    /**
     * List all books
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Books Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No books found </td><td>  -  </td></tr>
     </table>
     */
    public void booksGet() throws ApiException {
        booksGetWithHttpInfo();
    }

    /**
     * List all books
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Books Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No books found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = booksGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List all books (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Books Found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No books found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksISBNAuthorsGet
     * @param ISBN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All authors of the Book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Authors of this Book are listed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNAuthorsGetCall(String ISBN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{ISBN}/authors"
            .replaceAll("\\{" + "ISBN" + "\\}", localVarApiClient.escapeString(ISBN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksISBNAuthorsGetValidateBeforeCall(String ISBN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ISBN' is set
        if (ISBN == null) {
            throw new ApiException("Missing the required parameter 'ISBN' when calling booksISBNAuthorsGet(Async)");
        }
        

        okhttp3.Call localVarCall = booksISBNAuthorsGetCall(ISBN, _callback);
        return localVarCall;

    }

    /**
     * List all authors of a book
     * 
     * @param ISBN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All authors of the Book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Authors of this Book are listed </td><td>  -  </td></tr>
     </table>
     */
    public void booksISBNAuthorsGet(String ISBN) throws ApiException {
        booksISBNAuthorsGetWithHttpInfo(ISBN);
    }

    /**
     * List all authors of a book
     * 
     * @param ISBN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All authors of the Book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Authors of this Book are listed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksISBNAuthorsGetWithHttpInfo(String ISBN) throws ApiException {
        okhttp3.Call localVarCall = booksISBNAuthorsGetValidateBeforeCall(ISBN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List all authors of a book (asynchronously)
     * 
     * @param ISBN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All authors of the Book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Authors of this Book are listed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNAuthorsGetAsync(String ISBN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksISBNAuthorsGetValidateBeforeCall(ISBN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksISBNDelete
     * @param ISBN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNDeleteCall(String ISBN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{ISBN}"
            .replaceAll("\\{" + "ISBN" + "\\}", localVarApiClient.escapeString(ISBN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksISBNDeleteValidateBeforeCall(String ISBN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ISBN' is set
        if (ISBN == null) {
            throw new ApiException("Missing the required parameter 'ISBN' when calling booksISBNDelete(Async)");
        }
        

        okhttp3.Call localVarCall = booksISBNDeleteCall(ISBN, _callback);
        return localVarCall;

    }

    /**
     * Delete a book
     * 
     * @param ISBN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not deleted </td><td>  -  </td></tr>
     </table>
     */
    public void booksISBNDelete(String ISBN) throws ApiException {
        booksISBNDeleteWithHttpInfo(ISBN);
    }

    /**
     * Delete a book
     * 
     * @param ISBN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksISBNDeleteWithHttpInfo(String ISBN) throws ApiException {
        okhttp3.Call localVarCall = booksISBNDeleteValidateBeforeCall(ISBN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a book (asynchronously)
     * 
     * @param ISBN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Book deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNDeleteAsync(String ISBN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksISBNDeleteValidateBeforeCall(ISBN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksISBNGet
     * @param ISBN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNGetCall(String ISBN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{ISBN}"
            .replaceAll("\\{" + "ISBN" + "\\}", localVarApiClient.escapeString(ISBN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksISBNGetValidateBeforeCall(String ISBN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ISBN' is set
        if (ISBN == null) {
            throw new ApiException("Missing the required parameter 'ISBN' when calling booksISBNGet(Async)");
        }
        

        okhttp3.Call localVarCall = booksISBNGetCall(ISBN, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a book by ISBN
     * 
     * @param ISBN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public void booksISBNGet(String ISBN) throws ApiException {
        booksISBNGetWithHttpInfo(ISBN);
    }

    /**
     * Retrieve a book by ISBN
     * 
     * @param ISBN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksISBNGetWithHttpInfo(String ISBN) throws ApiException {
        okhttp3.Call localVarCall = booksISBNGetValidateBeforeCall(ISBN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a book by ISBN (asynchronously)
     * 
     * @param ISBN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNGetAsync(String ISBN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksISBNGetValidateBeforeCall(ISBN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksISBNOrdersGet
     * @param ISBN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All orders with the book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are no orders with this book </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNOrdersGetCall(String ISBN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/books/{ISBN}/orders"
            .replaceAll("\\{" + "ISBN" + "\\}", localVarApiClient.escapeString(ISBN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksISBNOrdersGetValidateBeforeCall(String ISBN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ISBN' is set
        if (ISBN == null) {
            throw new ApiException("Missing the required parameter 'ISBN' when calling booksISBNOrdersGet(Async)");
        }
        

        okhttp3.Call localVarCall = booksISBNOrdersGetCall(ISBN, _callback);
        return localVarCall;

    }

    /**
     * List all orders containing a specific book
     * 
     * @param ISBN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All orders with the book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are no orders with this book </td><td>  -  </td></tr>
     </table>
     */
    public void booksISBNOrdersGet(String ISBN) throws ApiException {
        booksISBNOrdersGetWithHttpInfo(ISBN);
    }

    /**
     * List all orders containing a specific book
     * 
     * @param ISBN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All orders with the book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are no orders with this book </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksISBNOrdersGetWithHttpInfo(String ISBN) throws ApiException {
        okhttp3.Call localVarCall = booksISBNOrdersGetValidateBeforeCall(ISBN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List all orders containing a specific book (asynchronously)
     * 
     * @param ISBN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All orders with the book </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are no orders with this book </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNOrdersGetAsync(String ISBN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksISBNOrdersGetValidateBeforeCall(ISBN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksISBNPut
     * @param ISBN  (required)
     * @param book  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNPutCall(String ISBN, Book book, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = book;

        // create path and map variables
        String localVarPath = "/books/{ISBN}"
            .replaceAll("\\{" + "ISBN" + "\\}", localVarApiClient.escapeString(ISBN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksISBNPutValidateBeforeCall(String ISBN, Book book, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ISBN' is set
        if (ISBN == null) {
            throw new ApiException("Missing the required parameter 'ISBN' when calling booksISBNPut(Async)");
        }
        
        // verify the required parameter 'book' is set
        if (book == null) {
            throw new ApiException("Missing the required parameter 'book' when calling booksISBNPut(Async)");
        }
        

        okhttp3.Call localVarCall = booksISBNPutCall(ISBN, book, _callback);
        return localVarCall;

    }

    /**
     * Update an existing book
     * 
     * @param ISBN  (required)
     * @param book  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not updated </td><td>  -  </td></tr>
     </table>
     */
    public void booksISBNPut(String ISBN, Book book) throws ApiException {
        booksISBNPutWithHttpInfo(ISBN, book);
    }

    /**
     * Update an existing book
     * 
     * @param ISBN  (required)
     * @param book  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksISBNPutWithHttpInfo(String ISBN, Book book) throws ApiException {
        okhttp3.Call localVarCall = booksISBNPutValidateBeforeCall(ISBN, book, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an existing book (asynchronously)
     * 
     * @param ISBN  (required)
     * @param book  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Book updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksISBNPutAsync(String ISBN, Book book, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksISBNPutValidateBeforeCall(ISBN, book, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for booksPost
     * @param book  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Book created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Book not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksPostCall(Book book, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = book;

        // create path and map variables
        String localVarPath = "/books";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call booksPostValidateBeforeCall(Book book, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'book' is set
        if (book == null) {
            throw new ApiException("Missing the required parameter 'book' when calling booksPost(Async)");
        }
        

        okhttp3.Call localVarCall = booksPostCall(book, _callback);
        return localVarCall;

    }

    /**
     * Create a new book
     * 
     * @param book  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Book created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Book not created </td><td>  -  </td></tr>
     </table>
     */
    public void booksPost(Book book) throws ApiException {
        booksPostWithHttpInfo(book);
    }

    /**
     * Create a new book
     * 
     * @param book  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Book created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Book not created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> booksPostWithHttpInfo(Book book) throws ApiException {
        okhttp3.Call localVarCall = booksPostValidateBeforeCall(book, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new book (asynchronously)
     * 
     * @param book  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Book created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Book not created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call booksPostAsync(Book book, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = booksPostValidateBeforeCall(book, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
