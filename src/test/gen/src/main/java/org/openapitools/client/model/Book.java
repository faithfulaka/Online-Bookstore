/*
 * Bookstore API
 * API for managing the bookstore's inventory, available authors, and customer orders
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Book
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-30T19:55:31.151827+01:00[Europe/London]")
public class Book {
  public static final String SERIALIZED_NAME_I_S_B_N = "ISBN";
  @SerializedName(SERIALIZED_NAME_I_S_B_N)
  private String ISBN;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_PUBLICATION_YEAR = "publicationYear";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_YEAR)
  private Integer publicationYear;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public Book() {
  }

  public Book ISBN(String ISBN) {
    
    this.ISBN = ISBN;
    return this;
  }

   /**
   * Get ISBN
   * @return ISBN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getISBN() {
    return ISBN;
  }


  public void setISBN(String ISBN) {
    this.ISBN = ISBN;
  }


  public Book title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public Book publicationYear(Integer publicationYear) {
    
    this.publicationYear = publicationYear;
    return this;
  }

   /**
   * Get publicationYear
   * @return publicationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPublicationYear() {
    return publicationYear;
  }


  public void setPublicationYear(Integer publicationYear) {
    this.publicationYear = publicationYear;
  }


  public Book price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Book book = (Book) o;
    return Objects.equals(this.ISBN, book.ISBN) &&
        Objects.equals(this.title, book.title) &&
        Objects.equals(this.publicationYear, book.publicationYear) &&
        Objects.equals(this.price, book.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ISBN, title, publicationYear, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Book {\n");
    sb.append("    ISBN: ").append(toIndentedString(ISBN)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    publicationYear: ").append(toIndentedString(publicationYear)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ISBN");
    openapiFields.add("title");
    openapiFields.add("publicationYear");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Book
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Book.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Book is not found in the empty JSON string", Book.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Book.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Book` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ISBN") != null && !jsonObj.get("ISBN").isJsonNull()) && !jsonObj.get("ISBN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ISBN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ISBN").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Book.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Book' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Book> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Book.class));

       return (TypeAdapter<T>) new TypeAdapter<Book>() {
           @Override
           public void write(JsonWriter out, Book value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Book read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Book given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Book
  * @throws IOException if the JSON string is invalid with respect to Book
  */
  public static Book fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Book.class);
  }

 /**
  * Convert an instance of Book to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

